package amqp

import (
	"crypto/tls"

	xlog "go.bryk.io/pkg/log"
)

// Option elements support functional-style settings management.
type Option func(*session) error

// WithLogger adjust the output handler for the instance. If no logger
// is provided, all output is discarded by default.
func WithLogger(logger xlog.Logger) Option {
	return func(s *session) error {
		s.mu.Lock()
		s.log = logger
		s.mu.Unlock()
		return nil
	}
}

// WithTopology allows a publisher or consumer instance to declare the
// expected/required configuration on the broker. Topology declarations
// can be exported as JSON/YAML files to facilitate sharing and storage.
// If no topology is provided the server is expected to be already
// configured as required.
func WithTopology(topology Topology) Option {
	return func(s *session) error {
		s.mu.Lock()
		s.topology = topology
		s.mu.Unlock()
		return nil
	}
}

// WithName adjust the identifier for the publisher or consumer instance
// with the broker. If no value is specified a default identifier will
// be generated by default.
func WithName(name string) Option {
	return func(s *session) error {
		s.mu.Lock()
		s.name = name
		s.mu.Unlock()
		return nil
	}
}

// WithPrefetch settings allow to adjust how many messages or how many
// bytes the server will try to keep on the network for consumers before
// receiving delivery confirmations. The intent is to make sure the network
// buffers stay full between the server and client.
//
// With a prefetch count greater than zero, the server will deliver that
// many messages to consumers before acknowledgments are received.
//
// With a prefetch size greater than zero, the server will try to keep at
// least that many bytes of deliveries flushed to the network before receiving
// acknowledgments from the consumers.
//
// The server ignores this options when subscriptions are started with "AutoAck"
// because no acknowledgments are expected or sent.
func WithPrefetch(count, size int) Option {
	return func(s *session) error {
		s.mu.Lock()
		s.prefetchCount = count
		s.prefetchSize = size
		s.mu.Unlock()
		return nil
	}
}

// WithTLS allows to adjust the settings used when communicating with a broker
// server using a `amqps://` connection.
func WithTLS(conf *tls.Config) Option {
	return func(s *session) error {
		s.mu.Lock()
		s.tlsConf = conf
		s.mu.Unlock()
		return nil
	}
}

// WithRPC adjust the instance for RPC support. Publishers will be able
// to submit RPC requests and consumers will be able to submit responses.
func WithRPC() Option {
	return func(s *session) error {
		s.mu.Lock()
		s.rpcEnabled = true
		s.mu.Unlock()
		return nil
	}
}
