// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

// DeletePetOK is response for DeletePet operation.
type DeletePetOK struct{}

// GetPetByIdNotFound is response for GetPetById operation.
type GetPetByIdNotFound struct{}

func (*GetPetByIdNotFound) getPetByIdRes() {}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetStatus returns new OptPetStatus with value set to v.
func NewOptPetStatus(v PetStatus) OptPetStatus {
	return OptPetStatus{
		Value: v,
		Set:   true,
	}
}

// OptPetStatus is optional PetStatus.
type OptPetStatus struct {
	Value PetStatus
	Set   bool
}

// IsSet returns true if OptPetStatus was set.
func (o OptPetStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetStatus) Reset() {
	var v PetStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetStatus) SetTo(v PetStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetStatus) Get() (v PetStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetStatus) Or(d PetStatus) PetStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Pet
type Pet struct {
	ID        OptInt64     `json:"id"`
	Name      string       `json:"name"`
	PhotoUrls []string     `json:"photoUrls"`
	Status    OptPetStatus `json:"status"`
}

// GetID returns the value of ID.
func (s *Pet) GetID() OptInt64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *Pet) GetName() string {
	return s.Name
}

// GetPhotoUrls returns the value of PhotoUrls.
func (s *Pet) GetPhotoUrls() []string {
	return s.PhotoUrls
}

// GetStatus returns the value of Status.
func (s *Pet) GetStatus() OptPetStatus {
	return s.Status
}

// SetID sets the value of ID.
func (s *Pet) SetID(val OptInt64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Pet) SetName(val string) {
	s.Name = val
}

// SetPhotoUrls sets the value of PhotoUrls.
func (s *Pet) SetPhotoUrls(val []string) {
	s.PhotoUrls = val
}

// SetStatus sets the value of Status.
func (s *Pet) SetStatus(val OptPetStatus) {
	s.Status = val
}

func (*Pet) getPetByIdRes() {}

// Pet status in the store.
// Ref: #/components/schemas/PetStatus
type PetStatus string

const (
	PetStatusAvailable PetStatus = "available"
	PetStatusPending   PetStatus = "pending"
	PetStatusSold      PetStatus = "sold"
)

// AllValues returns all PetStatus values.
func (PetStatus) AllValues() []PetStatus {
	return []PetStatus{
		PetStatusAvailable,
		PetStatusPending,
		PetStatusSold,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PetStatus) MarshalText() ([]byte, error) {
	switch s {
	case PetStatusAvailable:
		return []byte(s), nil
	case PetStatusPending:
		return []byte(s), nil
	case PetStatusSold:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetStatus) UnmarshalText(data []byte) error {
	switch PetStatus(data) {
	case PetStatusAvailable:
		*s = PetStatusAvailable
		return nil
	case PetStatusPending:
		*s = PetStatusPending
		return nil
	case PetStatusSold:
		*s = PetStatusSold
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UpdatePetOK is response for UpdatePet operation.
type UpdatePetOK struct{}
