// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             buf-v1.7.0
// source: sample/v1/foo_api.proto

package samplev1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FooAPIClient is the client API for FooAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooAPIClient interface {
	// Reachability test.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Pong, error)
	// Health test.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	// Sample request.
	Request(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error)
	// Returns an error roughly about 20% of the time.
	Faulty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponse, error)
	// Exhibit a random latency between 10 and 200ms.
	Slow(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponse, error)
	// Sample server stream request.
	OpenServerStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (FooAPI_OpenServerStreamClient, error)
	// Sample client stream request.
	OpenClientStream(ctx context.Context, opts ...grpc.CallOption) (FooAPI_OpenClientStreamClient, error)
}

type fooAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewFooAPIClient(cc grpc.ClientConnInterface) FooAPIClient {
	return &fooAPIClient{cc}
}

func (c *fooAPIClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/sample.v1.FooAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/sample.v1.FooAPI/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooAPIClient) Request(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sample.v1.FooAPI/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooAPIClient) Faulty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/sample.v1.FooAPI/Faulty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooAPIClient) Slow(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/sample.v1.FooAPI/Slow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooAPIClient) OpenServerStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (FooAPI_OpenServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FooAPI_ServiceDesc.Streams[0], "/sample.v1.FooAPI/OpenServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooAPIOpenServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FooAPI_OpenServerStreamClient interface {
	Recv() (*GenericStreamChunk, error)
	grpc.ClientStream
}

type fooAPIOpenServerStreamClient struct {
	grpc.ClientStream
}

func (x *fooAPIOpenServerStreamClient) Recv() (*GenericStreamChunk, error) {
	m := new(GenericStreamChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fooAPIClient) OpenClientStream(ctx context.Context, opts ...grpc.CallOption) (FooAPI_OpenClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FooAPI_ServiceDesc.Streams[1], "/sample.v1.FooAPI/OpenClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooAPIOpenClientStreamClient{stream}
	return x, nil
}

type FooAPI_OpenClientStreamClient interface {
	Send(*OpenClientStreamRequest) error
	CloseAndRecv() (*StreamResult, error)
	grpc.ClientStream
}

type fooAPIOpenClientStreamClient struct {
	grpc.ClientStream
}

func (x *fooAPIOpenClientStreamClient) Send(m *OpenClientStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fooAPIOpenClientStreamClient) CloseAndRecv() (*StreamResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FooAPIServer is the server API for FooAPI service.
// All implementations must embed UnimplementedFooAPIServer
// for forward compatibility
type FooAPIServer interface {
	// Reachability test.
	Ping(context.Context, *emptypb.Empty) (*Pong, error)
	// Health test.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	// Sample request.
	Request(context.Context, *emptypb.Empty) (*Response, error)
	// Returns an error roughly about 20% of the time.
	Faulty(context.Context, *emptypb.Empty) (*DummyResponse, error)
	// Exhibit a random latency between 10 and 200ms.
	Slow(context.Context, *emptypb.Empty) (*DummyResponse, error)
	// Sample server stream request.
	OpenServerStream(*emptypb.Empty, FooAPI_OpenServerStreamServer) error
	// Sample client stream request.
	OpenClientStream(FooAPI_OpenClientStreamServer) error
	mustEmbedUnimplementedFooAPIServer()
}

// UnimplementedFooAPIServer must be embedded to have forward compatible implementations.
type UnimplementedFooAPIServer struct {
}

func (UnimplementedFooAPIServer) Ping(context.Context, *emptypb.Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFooAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedFooAPIServer) Request(context.Context, *emptypb.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedFooAPIServer) Faulty(context.Context, *emptypb.Empty) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Faulty not implemented")
}
func (UnimplementedFooAPIServer) Slow(context.Context, *emptypb.Empty) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Slow not implemented")
}
func (UnimplementedFooAPIServer) OpenServerStream(*emptypb.Empty, FooAPI_OpenServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenServerStream not implemented")
}
func (UnimplementedFooAPIServer) OpenClientStream(FooAPI_OpenClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenClientStream not implemented")
}
func (UnimplementedFooAPIServer) mustEmbedUnimplementedFooAPIServer() {}

// UnsafeFooAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooAPIServer will
// result in compilation errors.
type UnsafeFooAPIServer interface {
	mustEmbedUnimplementedFooAPIServer()
}

func RegisterFooAPIServer(s grpc.ServiceRegistrar, srv FooAPIServer) {
	s.RegisterService(&FooAPI_ServiceDesc, srv)
}

func _FooAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.v1.FooAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooAPIServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.v1.FooAPI/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooAPI_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooAPIServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.v1.FooAPI/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooAPIServer).Request(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooAPI_Faulty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooAPIServer).Faulty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.v1.FooAPI/Faulty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooAPIServer).Faulty(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooAPI_Slow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooAPIServer).Slow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.v1.FooAPI/Slow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooAPIServer).Slow(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooAPI_OpenServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FooAPIServer).OpenServerStream(m, &fooAPIOpenServerStreamServer{stream})
}

type FooAPI_OpenServerStreamServer interface {
	Send(*GenericStreamChunk) error
	grpc.ServerStream
}

type fooAPIOpenServerStreamServer struct {
	grpc.ServerStream
}

func (x *fooAPIOpenServerStreamServer) Send(m *GenericStreamChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _FooAPI_OpenClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FooAPIServer).OpenClientStream(&fooAPIOpenClientStreamServer{stream})
}

type FooAPI_OpenClientStreamServer interface {
	SendAndClose(*StreamResult) error
	Recv() (*OpenClientStreamRequest, error)
	grpc.ServerStream
}

type fooAPIOpenClientStreamServer struct {
	grpc.ServerStream
}

func (x *fooAPIOpenClientStreamServer) SendAndClose(m *StreamResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fooAPIOpenClientStreamServer) Recv() (*OpenClientStreamRequest, error) {
	m := new(OpenClientStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FooAPI_ServiceDesc is the grpc.ServiceDesc for FooAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FooAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sample.v1.FooAPI",
	HandlerType: (*FooAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _FooAPI_Ping_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _FooAPI_Health_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _FooAPI_Request_Handler,
		},
		{
			MethodName: "Faulty",
			Handler:    _FooAPI_Faulty_Handler,
		},
		{
			MethodName: "Slow",
			Handler:    _FooAPI_Slow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenServerStream",
			Handler:       _FooAPI_OpenServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OpenClientStream",
			Handler:       _FooAPI_OpenClientStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sample/v1/foo_api.proto",
}
