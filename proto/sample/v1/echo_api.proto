syntax = "proto3";

package sample.v1;

option go_package = "sample/v1;samplev1";

// Common types
import "google/protobuf/empty.proto";

// Local dependencies
import "sample/v1/model.proto";
import "third_party/google/api/annotations.proto";
import "third_party/envoyproxy/validate/validate.proto";
import "third_party/openapiv2/annotations.proto";

// OpenAPI settings.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Echo API";
    version: "0.1.0";
    contact: {
      name: "John Doe";
      email: "john.dow@example.com";
    };
  };
  schemes: HTTP;
	schemes: HTTPS;
	schemes: WSS;
	consumes: "application/json";
	consumes: "application/protobuf";
	produces: "application/json";
	produces: "application/protobuf";
};

// Echo service main interface.
service EchoAPI {
  // Reachability test.
  rpc Ping (google.protobuf.Empty) returns (Pong) {
    option (google.api.http) = {
      post: "/echo/ping"
    };
  }
  // Health test.
  rpc Health (google.protobuf.Empty) returns (HealthResponse) {
    option (google.api.http) = {
      post: "/echo/health"
    };
  }
  // Process an incoming echo request.
  rpc Echo (EchoRequest) returns (EchoResponse) {
    option (google.api.http) = {
      post: "/echo/request"
      body: "*"
    };
  }
  // Returns an error roughly about 20% of the time.
  rpc Faulty (google.protobuf.Empty) returns (DummyResponse) {
    option (google.api.http) = {
      post: "/echo/faulty"
    };
  }
  // Exhibit a random latency between 10 and 200ms.
  rpc Slow (google.protobuf.Empty) returns (DummyResponse) {
    option (google.api.http) = {
      post: "/echo/slow"
    };
  }
}

// Sample request for the "echo" service.
message EchoRequest {
  // Payload submitted to the "echo" request.
  string value = 1 [(validate.rules).string.min_len = 3];
}

// The response generated by the "echo" server.
message EchoResponse {
  // Result generated by the server.
  string result = 1;
}

// Custom error type returned by the `Faulty` RPC method.
message FaultyError {
  // RPC error code. MUST be a valid code value registered in the
  // google.golang.org/grpc/codes package.
  uint32 code = 1;

  // General description of the error.
  string desc = 2;

  // Custom key/value pairs providing additional details about the error.
  map<string, string> metadata = 3;
}
