syntax = "proto3";

package sample.v1;

option go_package = "sample/v1;samplev1";
option java_multiple_files = true;
option java_outer_classname = "EchoApiProto";
option java_package = "io.bryk.pkg.sample.v1";
option optimize_for = SPEED;
option php_namespace = "Bryk\\Pkg\\Sample\\V1";
option ruby_package = "bryk.pkg.sample.v1";

// Common types
import "google/protobuf/empty.proto";

// Local dependencies
import "sample/v1/model.proto";
import "third_party/google/api/annotations.proto";
import "third_party/envoyproxy/validate/validate.proto";

// Echo service main interface.
service EchoAPI {
  // Reachability test.
  rpc Ping (google.protobuf.Empty) returns (Pong) {
    option (google.api.http) = {
      post: "/echo/ping"
    };
  }
  // Health test.
  rpc Health (google.protobuf.Empty) returns (HealthResponse) {
    option (google.api.http) = {
      post: "/echo/health"
    };
  }
  // Process an incoming echo request.
  rpc Echo (EchoRequest) returns (EchoResponse) {
    option (google.api.http) = {
      post: "/echo/request"
      body: "*"
    };
  }
  // Returns an error roughly about 20% of the time.
  rpc Faulty (google.protobuf.Empty) returns (DummyResponse) {
    option (google.api.http) = {
      post: "/echo/faulty"
    };
  }
  // Exhibit a random latency between 10 and 200ms.
  rpc Slow (google.protobuf.Empty) returns (DummyResponse) {
    option (google.api.http) = {
      post: "/echo/slow"
    };
  }
}

// Sample request for the "echo" service.
message EchoRequest {
  // Payload submitted to the "echo" request.
  string value = 1 [(validate.rules).string.min_len = 3];
}

// The response generated by the "echo" server.
message EchoResponse {
  // Result generated by the server.
  string result = 1;
}
