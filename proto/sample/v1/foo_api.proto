syntax = "proto3";

package sample.v1;

option go_package = "sample/v1;samplev1";

// Common types
import "google/protobuf/empty.proto";

// Local dependencies
import "sample/v1/model.proto";
import "third_party/google/api/annotations.proto";
import "third_party/openapiv2/annotations.proto";

// OpenAPI settings.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Foo API";
    version: "0.1.0";
    contact: {
      name: "John Doe";
      email: "john.dow@example.com";
    };
  };
  schemes: HTTP;
	schemes: HTTPS;
	schemes: WSS;
	consumes: "application/json";
	consumes: "application/protobuf";
	produces: "application/json";
	produces: "application/protobuf";
};

// Sample "foo" service server.
service FooAPI {
  // Reachability test.
  rpc Ping (google.protobuf.Empty) returns (Pong) {
    option (google.api.http) = {
      post: "/foo/ping"
    };
  }
  // Health test.
  rpc Health (google.protobuf.Empty) returns (HealthResponse) {
    option (google.api.http) = {
      post: "/foo/health"
    };
  }
  // Sample request.
  rpc Request (google.protobuf.Empty) returns (Response) {
    option (google.api.http) = {
      post: "/foo/request"
    };
  }
  // Returns an error roughly about 20% of the time.
  rpc Faulty (google.protobuf.Empty) returns (DummyResponse) {
    option (google.api.http) = {
      post: "/foo/faulty"
    };
  }
  // Exhibit a random latency between 10 and 200ms.
  rpc Slow (google.protobuf.Empty) returns (DummyResponse) {
    option (google.api.http) = {
      post: "/foo/slow"
    };
  }
  // Sample server stream request.
  rpc OpenServerStream (google.protobuf.Empty) returns (stream GenericStreamChunk) {
    option (google.api.http) = {
      get: "/foo/server_stream"
    };
  }
  // Sample client stream request.
  rpc OpenClientStream (stream OpenClientStreamRequest) returns (StreamResult) {
    option (google.api.http) = {
      get: "/foo/client_stream"
    };
  }
}

// Generic stream messages returned by the server.
message GenericStreamChunk {
  // Identifier for the endpoint generating the stream message.
  string sender = 1;

  // Message generation UNIX timestamp.
  int64 stamp = 2;
}

// Generic stream messages send by the client.
message OpenClientStreamRequest {
  // Identifier for the endpoint generating the stream message.
  string sender = 1;

  // Message generation UNIX timestamp.
  int64 stamp = 2;
}

// Generic stream result.
message StreamResult {
  // Set to the total number of messages received during the request.
  int64 received = 1;
}
