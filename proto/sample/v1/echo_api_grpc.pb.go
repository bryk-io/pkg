// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             buf-v1.7.0
// source: sample/v1/echo_api.proto

package samplev1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoAPIClient is the client API for EchoAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoAPIClient interface {
	// Reachability test.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Pong, error)
	// Health test.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	// Process an incoming echo request.
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Returns an error roughly about 20% of the time.
	Faulty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponse, error)
	// Exhibit a random latency between 10 and 200ms.
	Slow(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponse, error)
}

type echoAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoAPIClient(cc grpc.ClientConnInterface) EchoAPIClient {
	return &echoAPIClient{cc}
}

func (c *echoAPIClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/sample.v1.EchoAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/sample.v1.EchoAPI/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoAPIClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/sample.v1.EchoAPI/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoAPIClient) Faulty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/sample.v1.EchoAPI/Faulty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoAPIClient) Slow(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/sample.v1.EchoAPI/Slow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoAPIServer is the server API for EchoAPI service.
// All implementations must embed UnimplementedEchoAPIServer
// for forward compatibility
type EchoAPIServer interface {
	// Reachability test.
	Ping(context.Context, *emptypb.Empty) (*Pong, error)
	// Health test.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	// Process an incoming echo request.
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// Returns an error roughly about 20% of the time.
	Faulty(context.Context, *emptypb.Empty) (*DummyResponse, error)
	// Exhibit a random latency between 10 and 200ms.
	Slow(context.Context, *emptypb.Empty) (*DummyResponse, error)
	mustEmbedUnimplementedEchoAPIServer()
}

// UnimplementedEchoAPIServer must be embedded to have forward compatible implementations.
type UnimplementedEchoAPIServer struct {
}

func (UnimplementedEchoAPIServer) Ping(context.Context, *emptypb.Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedEchoAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedEchoAPIServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedEchoAPIServer) Faulty(context.Context, *emptypb.Empty) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Faulty not implemented")
}
func (UnimplementedEchoAPIServer) Slow(context.Context, *emptypb.Empty) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Slow not implemented")
}
func (UnimplementedEchoAPIServer) mustEmbedUnimplementedEchoAPIServer() {}

// UnsafeEchoAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoAPIServer will
// result in compilation errors.
type UnsafeEchoAPIServer interface {
	mustEmbedUnimplementedEchoAPIServer()
}

func RegisterEchoAPIServer(s grpc.ServiceRegistrar, srv EchoAPIServer) {
	s.RegisterService(&EchoAPI_ServiceDesc, srv)
}

func _EchoAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.v1.EchoAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoAPIServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.v1.EchoAPI/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoAPI_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoAPIServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.v1.EchoAPI/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoAPIServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoAPI_Faulty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoAPIServer).Faulty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.v1.EchoAPI/Faulty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoAPIServer).Faulty(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoAPI_Slow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoAPIServer).Slow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.v1.EchoAPI/Slow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoAPIServer).Slow(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// EchoAPI_ServiceDesc is the grpc.ServiceDesc for EchoAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sample.v1.EchoAPI",
	HandlerType: (*EchoAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _EchoAPI_Ping_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _EchoAPI_Health_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _EchoAPI_Echo_Handler,
		},
		{
			MethodName: "Faulty",
			Handler:    _EchoAPI_Faulty_Handler,
		},
		{
			MethodName: "Slow",
			Handler:    _EchoAPI_Slow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample/v1/echo_api.proto",
}
