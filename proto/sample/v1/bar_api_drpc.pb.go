// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: sample/v1/bar_api.proto

package samplev1

import (
	context "context"
	errors "errors"

	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_sample_v1_bar_api_proto struct{}

func (drpcEncoding_File_sample_v1_bar_api_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_sample_v1_bar_api_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_sample_v1_bar_api_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_sample_v1_bar_api_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_sample_v1_bar_api_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCBarAPIClient interface {
	DRPCConn() drpc.Conn

	Ping(ctx context.Context, in *emptypb.Empty) (*Pong, error)
	Health(ctx context.Context, in *emptypb.Empty) (*HealthResponse, error)
	Request(ctx context.Context, in *emptypb.Empty) (*Response, error)
}

type drpcBarAPIClient struct {
	cc drpc.Conn
}

func NewDRPCBarAPIClient(cc drpc.Conn) DRPCBarAPIClient {
	return &drpcBarAPIClient{cc}
}

func (c *drpcBarAPIClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcBarAPIClient) Ping(ctx context.Context, in *emptypb.Empty) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/sample.v1.BarAPI/Ping", drpcEncoding_File_sample_v1_bar_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcBarAPIClient) Health(ctx context.Context, in *emptypb.Empty) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/sample.v1.BarAPI/Health", drpcEncoding_File_sample_v1_bar_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcBarAPIClient) Request(ctx context.Context, in *emptypb.Empty) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sample.v1.BarAPI/Request", drpcEncoding_File_sample_v1_bar_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCBarAPIServer interface {
	Ping(context.Context, *emptypb.Empty) (*Pong, error)
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	Request(context.Context, *emptypb.Empty) (*Response, error)
}

type DRPCBarAPIUnimplementedServer struct{}

func (s *DRPCBarAPIUnimplementedServer) Ping(context.Context, *emptypb.Empty) (*Pong, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBarAPIUnimplementedServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBarAPIUnimplementedServer) Request(context.Context, *emptypb.Empty) (*Response, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCBarAPIDescription struct{}

func (DRPCBarAPIDescription) NumMethods() int { return 3 }

func (DRPCBarAPIDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/sample.v1.BarAPI/Ping", drpcEncoding_File_sample_v1_bar_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBarAPIServer).
					Ping(
						ctx,
						in1.(*emptypb.Empty),
					)
			}, DRPCBarAPIServer.Ping, true
	case 1:
		return "/sample.v1.BarAPI/Health", drpcEncoding_File_sample_v1_bar_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBarAPIServer).
					Health(
						ctx,
						in1.(*emptypb.Empty),
					)
			}, DRPCBarAPIServer.Health, true
	case 2:
		return "/sample.v1.BarAPI/Request", drpcEncoding_File_sample_v1_bar_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBarAPIServer).
					Request(
						ctx,
						in1.(*emptypb.Empty),
					)
			}, DRPCBarAPIServer.Request, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterBarAPI(mux drpc.Mux, impl DRPCBarAPIServer) error {
	return mux.Register(impl, DRPCBarAPIDescription{})
}

type DRPCBarAPI_PingStream interface {
	drpc.Stream
	SendAndClose(*Pong) error
}

type drpcBarAPI_PingStream struct {
	drpc.Stream
}

func (x *drpcBarAPI_PingStream) SendAndClose(m *Pong) error {
	if err := x.MsgSend(m, drpcEncoding_File_sample_v1_bar_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCBarAPI_HealthStream interface {
	drpc.Stream
	SendAndClose(*HealthResponse) error
}

type drpcBarAPI_HealthStream struct {
	drpc.Stream
}

func (x *drpcBarAPI_HealthStream) SendAndClose(m *HealthResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_sample_v1_bar_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCBarAPI_RequestStream interface {
	drpc.Stream
	SendAndClose(*Response) error
}

type drpcBarAPI_RequestStream struct {
	drpc.Stream
}

func (x *drpcBarAPI_RequestStream) SendAndClose(m *Response) error {
	if err := x.MsgSend(m, drpcEncoding_File_sample_v1_bar_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
